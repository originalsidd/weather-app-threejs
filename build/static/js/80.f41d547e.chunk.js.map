{"version":3,"file":"static/js/80.f41d547e.chunk.js","mappings":"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","sources":["components/Camera.js","components/Globe.js","components/Scroll.js","components/PlaceList.js","utils/trie.js","components/SearchBar.js","components/icons.jsx","utils/Countries.js","components/WeatherOverlay.js","App.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport { useFrame } from '@react-three/fiber';\r\nimport { PerspectiveCamera, OrbitControls } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\nlet a = 50;\r\nlet b = 70;\r\n\r\nconst Camera = (props) => {\r\n    const ref = useRef();\r\n    const [flag, setFlag] = useState(true);\r\n    const vec = new THREE.Vector3();\r\n    let width = window.innerWidth;\r\n\r\n    if (width < 800 && flag) {\r\n        a = 80;\r\n        b = 120;\r\n        setFlag(false);\r\n    } else if (width > 800 && !flag) {\r\n        a = 50;\r\n        b = 70;\r\n        setFlag(true);\r\n    }\r\n\r\n    useFrame(() => {\r\n        width = window.innerWidth;\r\n        if (props.lat) {\r\n            ref.current.position.lerp(\r\n                vec.set(\r\n                    (a -\r\n                        a *\r\n                            Math.pow(\r\n                                Math.sin(\r\n                                    THREE.MathUtils.degToRad(\r\n                                        Math.abs(props.lat)\r\n                                    )\r\n                                ),\r\n                                4\r\n                            )) *\r\n                        Math.sin(THREE.MathUtils.degToRad(props.lon)),\r\n                    (a +\r\n                        2 *\r\n                            Math.pow(\r\n                                Math.abs(\r\n                                    Math.sin(\r\n                                        THREE.MathUtils.degToRad(props.lat)\r\n                                    )\r\n                                ),\r\n                                1\r\n                            )) *\r\n                        Math.sin(THREE.MathUtils.degToRad(props.lat)),\r\n                    (a -\r\n                        a *\r\n                            Math.pow(\r\n                                Math.sin(\r\n                                    THREE.MathUtils.degToRad(\r\n                                        Math.abs(props.lat)\r\n                                    )\r\n                                ),\r\n                                4\r\n                            )) *\r\n                        Math.cos(THREE.MathUtils.degToRad(props.lon))\r\n                ),\r\n                0.05\r\n            );\r\n        }\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <PerspectiveCamera\r\n                ref={ref}\r\n                makeDefault\r\n                position={[0, 0, b]}\r\n                fov={40}\r\n                onUpdate={(c) => c.updateProjectionMatrix()}\r\n            />\r\n            <OrbitControls target={[0, 0, 0]} enablePan={false} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Camera;\r\n","import React, { useRef } from 'react';\r\nimport { useLoader } from '@react-three/fiber';\r\nimport { TextureLoader } from 'three/src/loaders/TextureLoader.js';\r\n\r\nimport * as THREE from 'three';\r\n\r\nconst Globe = (props) => {\r\n    const earthRef = useRef();\r\n    const cloudRef = useRef();\r\n    const colorMap = useLoader(TextureLoader, 'textures/8k_earth_daymap.jpg');\r\n    const normalMap = useLoader(\r\n        TextureLoader,\r\n        'textures/8k_earth_normal_map.jpg'\r\n    );\r\n    const specularMap = useLoader(\r\n        TextureLoader,\r\n        'textures/8k_earth_specular_map.jpg'\r\n    );\r\n    const cloudsMap = useLoader(TextureLoader, 'textures/8k_earth_clouds.jpg');\r\n\r\n    return (\r\n        <>\r\n            <mesh ref={cloudRef} scale={20}>\r\n                <sphereGeometry args={[1.002, 64, 64]} />\r\n                <meshPhongMaterial\r\n                    map={cloudsMap}\r\n                    opacity={0.12}\r\n                    depthWrite={true}\r\n                    transparent={true}\r\n                    side={THREE.DoubleSide}\r\n                />\r\n            </mesh>\r\n            <mesh\r\n                {...props}\r\n                ref={earthRef}\r\n                rotation={[0, 4.713, 0]}\r\n                scale={20}\r\n                receiveShadow={true}\r\n            >\r\n                <sphereGeometry args={[1, 64, 64, 0]} />\r\n                <meshPhongMaterial specularMap={specularMap} />\r\n                <meshStandardMaterial\r\n                    map={colorMap}\r\n                    normalMap={normalMap}\r\n                    roughness={0.7}\r\n                    metalness={0.4}\r\n                />\r\n            </mesh>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Globe;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div\r\n            style={{\r\n                border: '0px solid white',\r\n                width: '350px',\r\n            }}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\n\r\nconst PlaceList = (props) => {\r\n    const placeArray = props.places.map((place) => {\r\n        return (\r\n            <div\r\n                className='place'\r\n                onClick={() => {\r\n                    props.handleSearch(place);\r\n                }}\r\n                key={place}\r\n            >\r\n                {place}\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return <div className='place-list'>{placeArray}</div>;\r\n};\r\n\r\nexport default PlaceList;\r\n","// Uses trie to implement drop down functionality\r\nimport TrieSearch from 'trie-search';\r\nimport cityList from './Cities.json';\r\n\r\nconst helperSet = new Set();\r\nconst trie = new TrieSearch();\r\nfor (let country in cityList) {\r\n    for (let city of cityList[country]) {\r\n        city = city.toLowerCase();\r\n        if (helperSet.has(city)) continue;\r\n        helperSet.add(city);\r\n        city = city.split(' ');\r\n        const key = city.join('');\r\n        for (let i = 0; i < city.length; ++i) {\r\n            city[i] = city[i][0].toUpperCase() + city[i].slice(1);\r\n        }\r\n        const value = city.join(' ');\r\n        trie.map(key, value);\r\n    }\r\n}\r\n\r\nexport default trie;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { FaSearchLocation } from 'react-icons/fa';\r\nimport Scroll from './Scroll';\r\nimport PlaceList from './PlaceList';\r\nimport trie from '../utils/trie';\r\n\r\nconst apikey = '1df7b707355fdfc7ad8570e5bb9310e4';\r\n\r\nconst SearchBar = (props) => {\r\n    const [text, setText] = useState('');\r\n    const [place, setPlace] = useState('');\r\n    const [miss, setMiss] = useState(false);\r\n    const [load, setLoad] = useState(false);\r\n\r\n    const handleInputChange = (event) => {\r\n        let city = event.target.value;\r\n        setText(city);\r\n        city = city.toLowerCase();\r\n        city = city.split(',');\r\n        city = city.join('');\r\n        city = city.split(' ');\r\n        city = city.join('');\r\n        setPlace(city);\r\n    };\r\n\r\n    const handleSearch = (place) => {\r\n        setLoad(true);\r\n        fetch(\r\n            `https://api.openweathermap.org/data/2.5/weather?q=${place}&appid=${apikey}`\r\n        )\r\n            .then((res) => {\r\n                if (res.ok) return res.json();\r\n                else if (res.status === 404) {\r\n                    setMiss(true);\r\n                    setLoad(false);\r\n                    throw new Error('Invalid');\r\n                }\r\n            })\r\n            .then((res) => {\r\n                props.setLat(res.coord.lat);\r\n                props.setLong(res.coord.lon);\r\n                return res;\r\n            })\r\n            .then((res) => {\r\n                props.setWeatherDetails(res);\r\n                setLoad(false);\r\n                return res;\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                setLoad(false);\r\n            });\r\n\r\n        setText('');\r\n        setPlace('');\r\n    };\r\n\r\n    document.onkeydown = (e) => {\r\n        if (e.key === 'Enter') {\r\n            handleSearch(text);\r\n        }\r\n    };\r\n\r\n    const filteredPlaces = trie.search(place).splice(0, 10);\r\n\r\n    useEffect(() => {\r\n        if (miss) setMiss(false);\r\n    }, [text]);\r\n\r\n    return (\r\n        <div className='search-container'>\r\n            <div className='search'>\r\n                <input\r\n                    className='search-bar'\r\n                    type='search'\r\n                    onChange={handleInputChange}\r\n                    value={text}\r\n                />\r\n                <div className='search-icon'>\r\n                    <FaSearchLocation\r\n                        color='#eee'\r\n                        onClick={handleSearch.bind(this, text)}\r\n                    />\r\n                </div>\r\n            </div>\r\n            {filteredPlaces.length ? (\r\n                <Scroll>\r\n                    <PlaceList\r\n                        places={filteredPlaces}\r\n                        setText={setText}\r\n                        handleSearch={handleSearch}\r\n                    />\r\n                </Scroll>\r\n            ) : (\r\n                <></>\r\n            )}\r\n            {miss && <div className='error'>Invalid Name: Try Again</div>}\r\n            {load && (\r\n                <div className='lds-ellipsis'>\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBar;\r\n","import '../utils/weather-icons.min.css';\r\n\r\nconst icons = {\r\n    '01d': <i className='wi wi-day-sunny'></i>,\r\n    '01n': <i className='wi wi-night-clear'></i>,\r\n    '02d': <i className='wi wi-day-cloudy'></i>,\r\n    '02n': <i className='wi wi-night-alt-cloudy'></i>,\r\n    '03d': <i className='wi wi-cloud'></i>,\r\n    '03n': <i className='wi wi-cloud'></i>,\r\n    '04d': <i className='wi wi-cloudy'></i>,\r\n    '04n': <i className='wi wi-cloudy'></i>,\r\n    '09d': <i className='wi wi-day-showers'></i>,\r\n    '09n': <i className='wi wi-night-showers'></i>,\r\n    '10d': <i className='wi wi-day-rain'></i>,\r\n    '10n': <i className='wi wi-night-rain'></i>,\r\n    '11d': <i className='wi wi-day-thunderstorm'></i>,\r\n    '11n': <i className='wi wi-night-thunderstorm'></i>,\r\n    '13d': <i className='wi wi-day-snow'></i>,\r\n    '13n': <i className='wi wi-night-snow'></i>,\r\n    '50d': <i className='wi wi-day-haze'></i>,\r\n    '50n': <i className='wi wi-night-fog'></i>,\r\n};\r\n\r\nexport default icons;\r\n","const country_names = {\r\n    AF: 'Afghanistan',\r\n    AL: 'Albania',\r\n    DZ: 'Algeria',\r\n    AD: 'AndorrA',\r\n    AO: 'Angola',\r\n    AI: 'Anguilla',\r\n    AQ: 'Antarctica',\r\n    AR: 'Argentina',\r\n    AM: 'Armenia',\r\n    AW: 'Aruba',\r\n    AU: 'Australia',\r\n    AT: 'Austria',\r\n    AZ: 'Azerbaijan',\r\n    BS: 'Bahamas',\r\n    BH: 'Bahrain',\r\n    BD: 'Bangladesh',\r\n    BB: 'Barbados',\r\n    BY: 'Belarus',\r\n    BE: 'Belgium',\r\n    BZ: 'Belize',\r\n    BJ: 'Benin',\r\n    BM: 'Bermuda',\r\n    BT: 'Bhutan',\r\n    BO: 'Bolivia',\r\n    BW: 'Botswana',\r\n    BR: 'Brazil',\r\n    BG: 'Bulgaria',\r\n    BI: 'Burundi',\r\n    KH: 'Cambodia',\r\n    CM: 'Cameroon',\r\n    CA: 'Canada',\r\n    TD: 'Chad',\r\n    CL: 'Chile',\r\n    CN: 'China',\r\n    CO: 'Colombia',\r\n    KM: 'Comoros',\r\n    CG: 'Congo',\r\n    CI: \"Cote D'Ivoire\",\r\n    HR: 'Croatia',\r\n    CU: 'Cuba',\r\n    CY: 'Cyprus',\r\n    DK: 'Denmark',\r\n    DJ: 'Djibouti',\r\n    DM: 'Dominica',\r\n    EC: 'Ecuador',\r\n    EG: 'Egypt',\r\n    ER: 'Eritrea',\r\n    EE: 'Estonia',\r\n    ET: 'Ethiopia',\r\n    FJ: 'Fiji',\r\n    FI: 'Finland',\r\n    FR: 'France',\r\n    GA: 'Gabon',\r\n    GM: 'Gambia',\r\n    GE: 'Georgia',\r\n    DE: 'Germany',\r\n    GH: 'Ghana',\r\n    GI: 'Gibraltar',\r\n    GR: 'Greece',\r\n    GL: 'Greenland',\r\n    GD: 'Grenada',\r\n    GP: 'Guadeloupe',\r\n    GU: 'Guam',\r\n    GT: 'Guatemala',\r\n    GG: 'Guernsey',\r\n    GN: 'Guinea',\r\n    GY: 'Guyana',\r\n    HT: 'Haiti',\r\n    HN: 'Honduras',\r\n    HU: 'Hungary',\r\n    IS: 'Iceland',\r\n    IN: 'India',\r\n    ID: 'Indonesia',\r\n    IQ: 'Iraq',\r\n    IE: 'Ireland',\r\n    IL: 'Israel',\r\n    IT: 'Italy',\r\n    JM: 'Jamaica',\r\n    JP: 'Japan',\r\n    JE: 'Jersey',\r\n    JO: 'Jordan',\r\n    KZ: 'Kazakhstan',\r\n    KE: 'Kenya',\r\n    KI: 'Kiribati',\r\n    KP: \"Korea, Democratic People'S Republic of\",\r\n    KW: 'Kuwait',\r\n    KG: 'Kyrgyzstan',\r\n    LA: \"Lao People'S Democratic Republic\",\r\n    LV: 'Latvia',\r\n    LB: 'Lebanon',\r\n    LS: 'Lesotho',\r\n    LR: 'Liberia',\r\n    LI: 'Liechtenstein',\r\n    LT: 'Lithuania',\r\n    LU: 'Luxembourg',\r\n    MO: 'Macao',\r\n    MG: 'Madagascar',\r\n    MW: 'Malawi',\r\n    MY: 'Malaysia',\r\n    MV: 'Maldives',\r\n    ML: 'Mali',\r\n    MT: 'Malta',\r\n    MQ: 'Martinique',\r\n    MR: 'Mauritania',\r\n    MU: 'Mauritius',\r\n    YT: 'Mayotte',\r\n    MX: 'Mexico',\r\n    MC: 'Monaco',\r\n    MN: 'Mongolia',\r\n    MS: 'Montserrat',\r\n    MA: 'Morocco',\r\n    MZ: 'Mozambique',\r\n    MM: 'Myanmar',\r\n    NA: 'Namibia',\r\n    NR: 'Nauru',\r\n    NP: 'Nepal',\r\n    NL: 'Netherlands',\r\n    NI: 'Nicaragua',\r\n    NE: 'Niger',\r\n    NG: 'Nigeria',\r\n    NU: 'Niue',\r\n    NO: 'Norway',\r\n    OM: 'Oman',\r\n    PK: 'Pakistan',\r\n    PW: 'Palau',\r\n    PA: 'Panama',\r\n    PY: 'Paraguay',\r\n    PE: 'Peru',\r\n    PH: 'Philippines',\r\n    PN: 'Pitcairn',\r\n    PL: 'Poland',\r\n    PT: 'Portugal',\r\n    QA: 'Qatar',\r\n    RE: 'Reunion',\r\n    RO: 'Romania',\r\n    RW: 'RWANDA',\r\n    WS: 'Samoa',\r\n    SN: 'Senegal',\r\n    SC: 'Seychelles',\r\n    SG: 'Singapore',\r\n    SK: 'Slovakia',\r\n    SI: 'Slovenia',\r\n    SO: 'Somalia',\r\n    ES: 'Spain',\r\n    SD: 'Sudan',\r\n    SR: 'Suriname',\r\n    SZ: 'Swaziland',\r\n    SE: 'Sweden',\r\n    CH: 'Switzerland',\r\n    TJ: 'Tajikistan',\r\n    TH: 'Thailand',\r\n    TG: 'Togo',\r\n    TK: 'Tokelau',\r\n    TO: 'Tonga',\r\n    TN: 'Tunisia',\r\n    TR: 'Turkey',\r\n    TM: 'Turkmenistan',\r\n    TV: 'Tuvalu',\r\n    UG: 'Uganda',\r\n    UA: 'Ukraine',\r\n    UY: 'Uruguay',\r\n    UZ: 'Uzbekistan',\r\n    VU: 'Vanuatu',\r\n    VE: 'Venezuela',\r\n    YE: 'Yemen',\r\n    ZM: 'Zambia',\r\n    ZW: 'Zimbabwe',\r\n    AX: 'Åland Islands',\r\n    AS: 'American Samoa',\r\n    AG: 'Antigua and Barbuda',\r\n    BA: 'Bosnia and Herzegovina',\r\n    BV: 'Bouvet Island',\r\n    IO: 'British Indian Ocean Territory',\r\n    BN: 'Brunei Darussalam',\r\n    BF: 'Burkina Faso',\r\n    CV: 'Cape Verde',\r\n    KY: 'Cayman Islands',\r\n    CF: 'Central African Republic',\r\n    CX: 'Christmas Island',\r\n    CC: 'Cocos (Keeling) Islands',\r\n    CD: 'Congo, The Democratic Republic of the',\r\n    CK: 'Cook Islands',\r\n    CR: 'Costa Rica',\r\n    CZ: 'Czech Republic',\r\n    DO: 'Dominican Republic',\r\n    SV: 'El Salvador',\r\n    GQ: 'Equatorial Guinea',\r\n    FK: 'Falkland Islands (Malvinas)',\r\n    FO: 'Faroe Islands',\r\n    GF: 'French Guiana',\r\n    PF: 'French Polynesia',\r\n    TF: 'French Southern Territories',\r\n    GW: 'Guinea-Bissau',\r\n    HM: 'Heard Island and Mcdonald Islands',\r\n    VA: 'Holy See (Vatican City State)',\r\n    HK: 'Hong Kong',\r\n    IR: 'Iran, Islamic Republic Of',\r\n    IM: 'Isle of Man',\r\n    KR: 'Korea, Republic of',\r\n    LY: 'Libyan Arab Jamahiriya',\r\n    MK: 'Macedonia, The Former Yugoslav Republic of',\r\n    MH: 'Marshall Islands',\r\n    FM: 'Micronesia, Federated States of',\r\n    MD: 'Moldova, Republic of',\r\n    AN: 'Netherlands Antilles',\r\n    NC: 'New Caledonia',\r\n    NZ: 'New Zealand',\r\n    NF: 'Norfolk Island',\r\n    MP: 'Northern Mariana Islands',\r\n    PS: 'Palestinian Territory, Occupied',\r\n    PG: 'Papua New Guinea',\r\n    PR: 'Puerto Rico',\r\n    RU: 'Russian Federation',\r\n    SH: 'Saint Helena',\r\n    KN: 'Saint Kitts and Nevis',\r\n    LC: 'Saint Lucia',\r\n    PM: 'Saint Pierre and Miquelon',\r\n    VC: 'Saint Vincent and the Grenadines',\r\n    SM: 'San Marino',\r\n    ST: 'Sao Tome and Principe',\r\n    SA: 'Saudi Arabia',\r\n    CS: 'Serbia and Montenegro',\r\n    SL: 'Sierra Leone',\r\n    SB: 'Solomon Islands',\r\n    ZA: 'South Africa',\r\n    GS: 'South Georgia and the South Sandwich Islands',\r\n    LK: 'Sri Lanka',\r\n    SJ: 'Svalbard and Jan Mayen',\r\n    SY: 'Syrian Arab Republic',\r\n    TW: 'Taiwan, Province of China',\r\n    TZ: 'Tanzania, United Republic of',\r\n    TL: 'Timor-Leste',\r\n    TT: 'Trinidad and Tobago',\r\n    TC: 'Turks and Caicos Islands',\r\n    AE: 'United Arab Emirates',\r\n    GB: 'United Kingdom',\r\n    US: 'United States',\r\n    UM: 'United States Minor Outlying Islands',\r\n    VN: 'Vietnam',\r\n    VG: 'Virgin Islands, British',\r\n    VI: 'Virgin Islands, U.S.',\r\n    WF: 'Wallis and Futuna',\r\n    EH: 'Western Sahara',\r\n};\r\n\r\nexport default country_names;\r\n","import React, { useEffect, useState } from 'react';\r\nimport icons from './icons.jsx';\r\nimport country_names from '../utils/Countries';\r\n\r\nconst days = [\r\n    'Sunday',\r\n    'Monday',\r\n    'Tuesday',\r\n    'Wednesday',\r\n    'Thursday',\r\n    'Friday',\r\n    'Saturday',\r\n];\r\n\r\nconst WeatherOverlay = (props) => {\r\n    const [icon, setIcon] = useState(null);\r\n    const [drop, setDrop] = useState(false);\r\n    const [details, setDetails] = useState(null);\r\n    const [day, setDay] = useState('');\r\n    const [date, setDate] = useState(null);\r\n    const [time, setTime] = useState(null);\r\n    const [dir, setDir] = useState('');\r\n\r\n    const handleMouseMove = (e, card) => {\r\n        const rect = card.getBoundingClientRect(),\r\n            x = e.clientX - rect.left,\r\n            y = e.clientY - rect.top;\r\n\r\n        card.style.setProperty('--mouse-x', `${x}px`);\r\n        card.style.setProperty('--mouse-y', `${y}px`);\r\n    };\r\n\r\n    const timeCorrect = (s) => {\r\n        if (s.length === 1) s = '0' + s;\r\n        else if (s.length === 0) s = '00';\r\n        return s;\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.getElementsByClassName('cards')[0].onmousemove = (e) => {\r\n            for (const card of document.getElementsByClassName('card')) {\r\n                handleMouseMove(e, card);\r\n            }\r\n        };\r\n        document.getElementsByClassName('cards')[1].onmousemove = (e) => {\r\n            for (const card of document.getElementsByClassName('card')) {\r\n                handleMouseMove(e, card);\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setDetails(props.weatherDetails);\r\n        if (details) {\r\n            setIcon(icons[details.weather[0].icon]);\r\n            setDrop(true);\r\n            const dir = details?.wind?.deg;\r\n            if (dir > 22.5 && dir < 67.5) setDir('NE');\r\n            else if (dir > 67.5 && dir < 112.5) setDir('E');\r\n            else if (dir > 112.5 && dir < 167.5) setDir('SE');\r\n            else if (dir > 167.5 && dir < 202.5) setDir('S');\r\n            else if (dir > 202.5 && dir < 247.5) setDir('SW');\r\n            else if (dir > 247.5 && dir < 292.5) setDir('W');\r\n            else if (dir > 292.5 && dir < 337.5) setDir('NW');\r\n            else setDir('N');\r\n        }\r\n    }, [props.weatherDetails, details]);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (details) {\r\n                const date = new Date();\r\n                const localTime = date.getTime();\r\n                const localOffset = date.getTimezoneOffset() * 60000;\r\n                const utc = localTime + localOffset;\r\n                const atlanta = utc + 1000 * details.timezone;\r\n                const new_date = new Date(atlanta);\r\n                let h = new_date.getHours().toString();\r\n                let m = new_date.getMinutes().toString();\r\n                let s = new_date.getSeconds().toString();\r\n                h = timeCorrect(h);\r\n                m = timeCorrect(m);\r\n                s = timeCorrect(s);\r\n                const settime = h + ':' + m + ':' + s;\r\n                setTime(settime);\r\n                setDay(days[new_date.getDay()]);\r\n                const setdate =\r\n                    new_date.getDate().toString() +\r\n                    '/' +\r\n                    (new_date.getMonth() + 1).toString() +\r\n                    '/' +\r\n                    new_date.getFullYear().toString().slice(2);\r\n                setDate(setdate);\r\n            }\r\n        }, 1000);\r\n        return () => clearInterval(interval);\r\n    }, [details]);\r\n\r\n    return (\r\n        <div className='weather-overlay'>\r\n            <div className='card-container'>\r\n                <div className='cards'>\r\n                    <div className='card'>\r\n                        <div className='card-content'>\r\n                            <div className='big-text'>\r\n                                {Math.round(details?.main?.temp - 273.15)}°C\r\n                            </div>\r\n                            <div className='mid-text line'>{details?.name}</div>\r\n                            <div className='mid-text'>\r\n                                {country_names[details?.sys?.country]}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='card'>\r\n                        <div className='card-content'>\r\n                            <div className='temp-text'>\r\n                                {Math.round(details?.main?.feels_like - 273.15)}\r\n                                °C\r\n                            </div>\r\n                            <div className='mid-text'>Feels Like</div>\r\n                            <br />\r\n                            <div className='temp-text'>\r\n                                {details?.main?.humidity}%\r\n                            </div>\r\n                            <div className='mid-text'>Humidity</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='card'>\r\n                        <div className='card-content'>\r\n                            <div className='temp-text'>\r\n                                {Math.round(details?.main?.temp_max - 273.15)}\r\n                                °C\r\n                            </div>\r\n                            <div className='mid-text'>Max Now</div>\r\n                            <br />\r\n                            <div className='temp-text'>\r\n                                {Math.round(details?.main?.temp_min - 273.15)}\r\n                                °C\r\n                            </div>\r\n                            <div className='mid-text'>Min Now</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='cards'>\r\n                    <div className='card'>\r\n                        <div className='card-content'>\r\n                            <div className='icon'>{icon}</div>\r\n                            <div className='mid-text'>\r\n                                {details?.weather[0]?.main}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='card'>\r\n                        <div className='card-content'>\r\n                            <div className='temp-text'>{time}</div>\r\n                            <div className='mid-text'>hh:mm:ss</div>\r\n                            <br />\r\n                            <div className='temp-text'>{date}</div>\r\n                            <div className='mid-text'>{day}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='card'>\r\n                        <div className='card-content'>\r\n                            <div className='temp-text'>\r\n                                {details?.wind?.speed}\r\n                                {dir}\r\n                            </div>\r\n                            <div className='mid-text'>Wind Speed</div>\r\n                            <br />\r\n                            <div className='temp-text'>\r\n                                {details?.visibility / 1000}km\r\n                            </div>\r\n                            <div className='mid-text'>Visibility</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {drop && (\r\n                <div className='loc-drop'>\r\n                    <div className='circle1'></div>\r\n                    <div className='circle2'></div>\r\n                    <div className='circle3'></div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WeatherOverlay;\r\n","import React, { Suspense, useRef, useState, useEffect } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { Stars } from '@react-three/drei';\nimport Camera from './components/Camera';\nimport Globe from './components/Globe';\nimport Load from './components/Load';\nimport SearchBar from './components/SearchBar';\nimport WeatherOverlay from './components/WeatherOverlay';\nimport * as THREE from 'three';\nimport './App.css';\n\nconst Scene = (props) => {\n    const lightRef = useRef();\n    const date = new Date();\n    let dayOfYear = Math.floor(\n        (date - new Date(date.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24\n    );\n    if (dayOfYear > 172) {\n        dayOfYear -= (172 + 356) / 2;\n        dayOfYear *= -1;\n    } else {\n        dayOfYear -= 172 / 2;\n    }\n    let lightAxisAngle = dayOfYear / 5.6275;\n    // 172 until summer solstice\n    // 356 until winter solstice\n    // can devise function like x-172/2 % 172\n    // tan (x/10) = 23.5\n    // x=15.282\n    // 86 <- Max\n    // 86 -> 15.282 mapping\n    // 5.6275 ratio\n\n    // degree calculated from seconds of Greenwich time and placing sun overhead\n\n    useFrame(() => {\n        const time = new Date();\n        const seconds =\n            3600 * time.getUTCHours() +\n            60 * time.getUTCMinutes() +\n            time.getUTCSeconds();\n        const degree = ((seconds - 43200) / 86400) * 360;\n        if (lightRef.current) {\n            lightRef.current.position.x =\n                -10 * Math.sin(THREE.MathUtils.degToRad(degree));\n            lightRef.current.position.z =\n                10 * Math.cos(THREE.MathUtils.degToRad(degree));\n        }\n    });\n    return (\n        <group>\n            <Stars />\n            <ambientLight intensity={0.4} />\n            <directionalLight\n                ref={lightRef}\n                position={[10, lightAxisAngle, 0]}\n                intensity={1}\n            />\n            <Camera {...props} />\n            <Globe position={[0, 0, 0]} />\n        </group>\n    );\n};\n\nconst App = () => {\n    const [lat, setLat] = useState(null);\n    const [long, setLong] = useState(null);\n    const [weatherDetails, setWeatherDetails] = useState(null);\n\n    return (\n        <div className='main'>\n            <SearchBar\n                lat={lat}\n                lon={long}\n                setLat={setLat}\n                setLong={setLong}\n                setWeatherDetails={setWeatherDetails}\n            />\n\n            {weatherDetails === null ? (\n                <div className='intro'>EARTH</div>\n            ) : (\n                <></>\n            )}\n\n            <Suspense fallback={<Load desc={'Earth'} />}>\n                <Canvas style={{ position: 'absolute' }}>\n                    <Scene lat={lat} lon={long} />\n                </Canvas>\n            </Suspense>\n\n            {weatherDetails !== null ? (\n                <WeatherOverlay weatherDetails={weatherDetails} />\n            ) : (\n                <></>\n            )}\n        </div>\n    );\n};\n\nexport default App;\n"],"names":["a","b","props","ref","useRef","useState","flag","setFlag","vec","THREE","width","window","innerWidth","useFrame","lat","current","position","lerp","set","Math","pow","sin","abs","lon","cos","PerspectiveCamera","makeDefault","fov","onUpdate","c","updateProjectionMatrix","OrbitControls","target","enablePan","earthRef","cloudRef","colorMap","useLoader","TextureLoader","normalMap","specularMap","cloudsMap","scale","args","map","opacity","depthWrite","transparent","side","rotation","receiveShadow","roughness","metalness","style","border","children","placeArray","places","place","className","onClick","handleSearch","helperSet","Set","trie","TrieSearch","country","cityList","city","toLowerCase","has","add","key","split","join","i","length","toUpperCase","slice","value","text","setText","setPlace","miss","setMiss","load","setLoad","fetch","then","res","ok","json","status","Error","setLat","coord","setLong","setWeatherDetails","catch","error","console","log","document","onkeydown","e","filteredPlaces","splice","useEffect","type","onChange","event","color","bind","AF","AL","DZ","AD","AO","AI","AQ","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BW","BR","BG","BI","KH","CM","CA","TD","CL","CN","CO","KM","CG","CI","HR","CU","CY","DK","DJ","DM","EC","EG","ER","EE","ET","FJ","FI","FR","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GY","HT","HN","HU","IS","IN","ID","IQ","IE","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KW","KG","LA","LV","LB","LS","LR","LI","LT","LU","MO","MG","MW","MY","MV","ML","MT","MQ","MR","MU","YT","MX","MC","MN","MS","MA","MZ","MM","NA","NR","NP","NL","NI","NE","NG","NU","NO","OM","PK","PW","PA","PY","PE","PH","PN","PL","PT","QA","RE","RO","RW","WS","SN","SC","SG","SK","SI","SO","ES","SD","SR","SZ","SE","CH","TJ","TH","TG","TK","TO","TN","TR","TM","TV","UG","UA","UY","UZ","VU","VE","YE","ZM","ZW","AX","AS","AG","BA","BV","IO","BN","BF","CV","KY","CF","CX","CC","CD","CK","CR","CZ","DO","SV","GQ","FK","FO","GF","PF","TF","GW","HM","VA","HK","IR","IM","KR","LY","MK","MH","FM","MD","AN","NC","NZ","NF","MP","PS","PG","PR","RU","SH","KN","LC","PM","VC","SM","ST","SA","CS","SL","SB","ZA","GS","LK","SJ","SY","TW","TZ","TL","TT","TC","AE","GB","US","UM","VN","VG","VI","WF","EH","days","icon","setIcon","drop","setDrop","details","setDetails","day","setDay","date","setDate","time","setTime","dir","setDir","handleMouseMove","card","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","setProperty","timeCorrect","s","getElementsByClassName","onmousemove","weatherDetails","icons","weather","wind","deg","interval","setInterval","Date","atlanta","getTime","getTimezoneOffset","timezone","new_date","h","getHours","toString","m","getMinutes","getSeconds","getDay","setdate","getDate","getMonth","getFullYear","clearInterval","round","main","temp","name","country_names","sys","feels_like","humidity","temp_max","temp_min","speed","visibility","Scene","lightRef","dayOfYear","floor","lightAxisAngle","degree","getUTCHours","getUTCMinutes","getUTCSeconds","z","Stars","intensity","long","Suspense","fallback","Load","desc"],"sourceRoot":""}